import base64
import datetime
import json

import requests
from dotenv import load_dotenv
import os
import logging

from openai import OpenAI

import yfinance
import matplotlib.pyplot as plt

logging.basicConfig(
    filename="logger.log",
    filemode="w",
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

logger = logging.getLogger(__name__)
load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def save_crypto_graph(crypto_name: str):

    if not crypto_name.endswith("-USD"):
        crypto_name = crypto_name + "-USD"

    data = yfinance.Ticker(crypto_name).history(period="1mo", interval="1h")
    print(data)

    plt.figure(figsize=(10, 5))
    plt.plot(data.index, data["Close"], label=crypto_name)
    plt.title(f"{crypto_name} Price Chart (7d)")
    plt.xlabel("Date")
    plt.ylabel("Price (USD)")
    plt.legend()
    plt.grid(True)
    plt.savefig("crypto_chart.png")

def encode_image(image_path):
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode("utf-8")

def make_request_to_openai(text) -> str:
    #preapre a chart
    base64_image = encode_image("crypto_chart.png")

    summary = json.dumps(text, ensure_ascii=False)

    response = client.responses.create(
        model="gpt-5-nano",
        input=[
            {
                "role": "user",
                "content": [
                    {"type": "input_text", "text": f"{summary}"},
                    {
                        "type": "input_image",
                        "image_url": f"data:image/jpeg;base64,{base64_image}",
                    },
                ],
            }
        ],
        instructions="""
        –¢—ã ‚Äì —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –≤ —Å—Ç–∏–ª–µ **—Å–∫–∞–ª—å–ø–∏–Ω–≥**. 
        –Ø –ø–µ—Ä–µ–¥–∞—é —Ç–µ–±–µ –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ. 
        –í –æ–±—ä–µ–∫—Ç–µ –µ—Å—Ç—å:
        - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, –æ–±—ä—ë–º —Ç–æ—Ä–≥–æ–≤, –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç—Ä–∏–∫–∏;
        - –º–∞—Å—Å–∏–≤ –Ω–æ–≤–æ—Å—Ç–µ–π (–∫–∞–∂–¥–∞—è –Ω–æ–≤–æ—Å—Ç—å –∏–º–µ–µ—Ç —Å—Å—ã–ª–∫—É –∏ –ø–æ–∑–∏—Ü–∏—é SENTIMENT, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å);
        - –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (—Å–≤–µ—á–∏) –∑–∞ –¥–µ–Ω—å –∏–ª–∏ –Ω–µ–¥–µ–ª—é.

        –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
        1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–º–µ—Ç—Ä–∏–∫–∏, –Ω–æ–≤–æ—Å—Ç–∏, —Å–≤–µ—á–∏).
        2. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞.
        3. –î–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ **Spot —Ç–æ—Ä–≥–æ–≤–ª–µ (—Å–∫–∞–ª—å–ø–∏–Ω–≥)**:
           - –ö—É–ø–∏—Ç—å / –ü—Ä–æ–¥–∞—Ç—å / –î–µ—Ä–∂–∞—Ç—å.
           - –£–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ –∏ —Ü–µ–Ω—É –≤—ã—Ö–æ–¥–∞ (–∫–æ—Ä–æ—Ç–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω).
           - –£–∫–∞–∑–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (0‚Äì1).
           - –ß—ë—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É.
        4. –î–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ **Futures —Ç–æ—Ä–≥–æ–≤–ª–µ (—Å–∫–∞–ª—å–ø–∏–Ω–≥)**:
           - –õ–æ–Ω–≥ / –®–æ—Ä—Ç / –ù–µ –≤—Ö–æ–¥–∏—Ç—å.
           - –£–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –ø–ª–µ—á–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, x3, x5, x10).
           - –£–∫–∞–∑–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–≤–∏–∂–µ–Ω–∏—è (high / low).
           - –£–∫–∞–∑–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (0‚Äì1).
           - –ß—ë—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É.
        5. –£—á–∏—Ç—ã–≤–∞–π –≤–ª–∏—è–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ (–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ/–Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ) –∏ –∏—Ö –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç.
        6. –§–æ—Ä–º–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç **–≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Ñ–æ—Ä–º–µ**, –Ω–∞–ø—Ä–∏–º–µ—Ä:

        üìå –ú–æ–Ω–µ—Ç–∞: <–Ω–∞–∑–≤–∞–Ω–∏–µ>
        üí∞ Spot (—Å–∫–∞–ª—å–ø–∏–Ω–≥): <–¥–µ–π—Å—Ç–≤–∏–µ> (–≤—Ö–æ–¥ –ø–æ ‚Ä¶, –≤—ã—Ö–æ–¥ –ø–æ ‚Ä¶). –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ‚Ä¶
        üìà Futures (—Å–∫–∞–ª—å–ø–∏–Ω–≥): <–ª–æ–Ω–≥/—à–æ—Ä—Ç>, –ø–ª–µ—á–æ ‚Ä¶, –¥–∏–∞–ø–∞–∑–æ–Ω ‚Ä¶ ‚Äì ‚Ä¶. –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ‚Ä¶
        üìù –ü—Ä–∏—á–∏–Ω–∞: <–ß—ë—Ç–∫–æ–µ –∏ –≤–Ω—è—Ç–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ>

        –û—á–µ–Ω—å –≤–∞–∂–Ω–æ: —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–∞–∑—É –≤–∏–¥–µ–ª –∫—Ä–∞—Ç–∫—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–µ–π—Å—Ç–≤–∏–π (—á—Ç–æ –∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å, –≥–¥–µ –≤–æ–π—Ç–∏, –≥–¥–µ –≤—ã–π—Ç–∏), –±–µ–∑ JSON.
        """
    )

    return response.output_text



def get_crypto_news(name: str) -> list[dict[str, str]]:
    response = requests.get(
        "https://data-api.coindesk.com/news/v1/search",
        params={
            "categories": name,
            "lang": "EN",
            "api_key": os.getenv("COINDESK_API_KEY"),
            "limit": 10,
            "search_string": f"{name.upper()}",
            "source_key": "coindesk"
        },
        headers={"Content-type": "application/json; charset=UTF-8"}
    )
    data = response.json()

    news_items = []

    for item in data.get("Data", []):
        url = item.get("URL")
        published = datetime.datetime.fromtimestamp(item.get("PUBLISHED_ON"),
                    tz=datetime.timezone.utc).strftime("%Y-%m-%d %H:%M")
        sentiment = item.get("SENTIMENT", "NEUTRAL")
        source = item.get("SOURCE_DATA", {}).get("NAME", "Unknown")

        summary = {
            "url": url,
            "published": published,
            "sentiment": sentiment,
            "source": source,
        }
        news_items.append(summary)

    return news_items

def get_cryptocurrency(name: str) -> dict[str, float] | dict[str, str]:
    response = requests.get(
        'https://data-api.coindesk.com/spot/v1/latest/tick',
        params={
            "market": "coinbase",
            "instruments": f"{name.upper()}-USD",
            "apply_mapping": "true",
            "api_key": os.getenv("COINDESK_API_KEY")
        },
        headers={"Content-type": "application/json; charset=UTF-8"}
    )

    if response.status_code != 200:
        return {"error": "BAD_CODE"}

    data = response.json()["Data"][f"{name.upper()}-USD"]

    buy_volume = data.get("MOVING_24_HOUR_VOLUME_BUY", 0)
    sell_volume = data.get("MOVING_24_HOUR_VOLUME_SELL", 0)
    buy_sell_ratio = buy_volume / sell_volume if sell_volume != 0 else None

    return {
        "symbol": name.upper(),
        "price": data["PRICE"],

        "best_bid": data["BEST_BID"],
        "best_ask": data["BEST_ASK"],
        "spread": data["BEST_ASK"] - data["BEST_BID"],

        "change_24h": data["MOVING_24_HOUR_CHANGE_PERCENTAGE"],
        "change_7d": data["MOVING_7_DAY_CHANGE_PERCENTAGE"],
        "change_30d": data["MOVING_30_DAY_CHANGE_PERCENTAGE"],

        "day_open": data["CURRENT_DAY_OPEN"],
        "day_high": data["CURRENT_DAY_HIGH"],
        "day_low": data["CURRENT_DAY_LOW"],

        "volume_24h": data["MOVING_24_HOUR_VOLUME"],
        "quote_volume_24h": data["MOVING_24_HOUR_QUOTE_VOLUME"],
        "trades_24h": data["MOVING_24_HOUR_TOTAL_TRADES"],

        "buy_volume_24h": buy_volume,
        "sell_volume_24h": sell_volume,
        "buy_sell_ratio": buy_sell_ratio
    }


def summarize_crypto(name: str) -> str | None:
    logger.info(f"Summarizing crypto {name}")
    result = get_cryptocurrency(name)
    if result.get("error"):
        return None

    logger.info(f"Crypto {name} : {result}")

    news = get_crypto_news(name)
    logger.info(f"Crypto news : {news}")

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    save_crypto_graph(name)
    logger.info(f"Crypto chart saved!")

    summary = {
        "symbol": result["symbol"],
        "price": f"${result['price']:.2f}",
        "performance": {
            "24h": f"{result['change_24h']:.2f}%",
            "7d": f"{result['change_7d']:.2f}%",
            "30d": f"{result['change_30d']:.2f}%",
        },
        "range_today": f"${result['day_low']:.2f} - ${result['day_high']:.2f}",
        "volume_24h": f"{result['volume_24h']:,}",
        "quote_volume_24h": f"{result['quote_volume_24h']:,}",
        "trades_24h": f"{result['trades_24h']:,}",

        "best_bid": f"${result['best_bid']:.2f}",
        "best_ask": f"${result['best_ask']:.2f}",
        "spread": f"${result['spread']:.4f}",

        "buy_volume_24h": f"{result['buy_volume_24h']:,}",
        "sell_volume_24h": f"{result['sell_volume_24h']:,}",
        "buy_sell_ratio": f"{result['buy_sell_ratio']:.2f}" if result['buy_sell_ratio'] else None,

        "latest_news": news
    }

    return make_request_to_openai(summary)
